// nuke_enhancer.bhs

   /*||||*\
  // RoN  \\
 //  Nuke  \\
// Enhancer \\
\*||||||||||*/

// By Frankie
// 2020

// This script aims to make nuclear arms in Rise of Nations: Extended Edition much more deadly.
// Basically, nuclear missiles will devastate cities and render them completely useless for a duration of time

include "helper_library.bhs"

// You may mess with these as you please
labels {
	// Number of seconds between Modern Age check calls. Default = 30 seconds
	check_age_timer_DURATION = 30,
	// Radius of fallout effects from city center, measured in tiles
	FALLOUT_EFFECT_RADIUS = 20,
	// How long cities are affected by nuclear fallout in seconds. Default = 180 seconds.
	FALLOUT_TIME_SECS = 180,
	// How much units/buildings within the fallout zone are damaged each cycle (%). Default = 14
	DAMAGE_PCT_PER_CYCLE = 14,
	// Print out useful debug info
	DEBUG_MODE = false,
	
	// ** probably best to not touch these below ** //
	
	// The %HP a building has to lose in one cycle for the nuke detection system to activate. If it loses less than this value, a nuclear attack will not be considered possible. Default = 30
	HEALTH_DIFF_THRESHOLD = 30,
	// How often nukes are checked for, and damage is dealt to irradiated units. Determines one "cycle". Default = 3 seconds
	NUKE_WATCH_TIMER_DURATION = 1,
	
	
	VERSION = "1.2.1"
}

scenario {	
	// Making sure memory allocates properly... Arrays have not been working as expected in this scripting language
	City __;
	__.name = "preallocated";
	__.id = -1;
	__.nation = -1;
	__.uid = -1;
	
	static City[] cities_arr = [
	__, __, __, __, __, __, __, __, 
	__, __, __, __, __, __, __, __, 
	__, __, __, __, __, __, __, __, 
	__, __, __, __, __, __, __, __, 
	__, __, __, __, __, __, __, __, 
	__, __, __, __, __, __, __, __, 
	__, __, __, __, __, __, __, __, 
	__, __, __, __, __, __, __, __, 
	__, __, __, __, __, __, __, __];
	
	static global_arr_count = 0;
	run_once {
		set_game_msg_color("GREEN");
		print_game_msg("Frankie's Nuke Enhancement Script [v" + VERSION + "] is running! Waiting for Modern Age...");
		/* Disable ICBMs and conventional missiles */
		disable_type("Nuclear ICBM");
		disable_type("V2 Rocket");
		disable_type("Cruise Missile");
		/* start checking for modern age */
		set_timer("check_age_timer", check_age_timer_DURATION);	
	}
	trigger city_recheck(timer_expired("city_recheck_timer")) {		
		for (int i = 0; i < cities_arr.length; i++) {
			if (cities_arr[i].rechecking == true) {
				
				float prob = was_nuked(cities_arr[i], cities_arr[i].rechecking, cities_arr[i].last_conf, HEALTH_DIFF_THRESHOLD, DEBUG_MODE);
				
				if (prob > 50) {
					if (DEBUG_MODE == true) {
						print_game_msg("Rechecked attacked city of " + cities_arr[i].name + 
						". New probability: " + prob + "%)! Nuclear fallout is now in effect!");
					}
					print_game_msg("Nation #" + cities_arr[i].nation + "'s City of " + cities_arr[i].name + " has been attacked with a nuclear weapon (Confidence " + prob + "%)! Nuclear fallout is now in effect!");
					
					cities_arr[i].time_nuked = time_sec();
					cities_arr[i].last_conf = -999;
				} else {
					cities_arr[i].time_nuked = -1;
				}
				cities_arr[i].rechecking = false;
				
			}
		}
		enable_trigger("city_recheck");
	}
	trigger check_age(timer_expired("check_age_timer")) {		
		int age_reached = false;
		
		for (int i = 1; i < 9; ++i) {
			if (at_least_age(i, 6)) {
				print_game_msg("Nation # " + i + " has reached the Modern Age! Script activated...");
				stop_timer("check_age_timer");
				disable_trigger("check_age");
				age_reached = true;

				set_timer("nuke_watch_timer", NUKE_WATCH_TIMER_DURATION);
			}
		}
		if (age_reached == false) {
			enable_trigger("check_age");
			set_timer("check_age_timer", check_age_timer_DURATION);
		}
	}
	trigger nuke_watch(timer_expired("nuke_watch_timer")) {
		set_timer("nuke_watch_timer", NUKE_WATCH_TIMER_DURATION);
		enable_trigger("nuke_watch");

		for (int i = 1; i < 9; ++i) {
			for (int j = 0; j < num_cities(i); j++) {
				string city_name = find_city_name(i);
				int city_id = find_city_id(city_name);
				int city_hp = object_health(i, city_id);

				City c;
				c.nation = i;
				c.name = city_name;
				c.id = city_id;
				c.last_hp = -1;
				c.hp = city_hp;
				c.time_nuked = -1;
				c.num_bldgs = num_buildings_in_city(c);
				c.num_bldgs_last = -1;
				c.rechecking = false;
				c.last_conf = -999;
			
				add_city(cities_arr, c, global_arr_count);
			}
		}

		for (int k = 0; k < global_arr_count; k++) {
			if (cities_arr[k].last_hp != -1 && was_damaged(cities_arr[k], HEALTH_DIFF_THRESHOLD) && cities_arr[k].time_nuked == -1 && !cities_arr[k].rechecking) {
				float prob = was_nuked(cities_arr[k], cities_arr[k].rechecking, cities_arr[k].last_conf, HEALTH_DIFF_THRESHOLD, DEBUG_MODE);
				if (prob > 50.0) {
					print_game_msg("Nation #" + cities_arr[k].nation + "'s City of " + cities_arr[k].name + " has been attacked with a nuclear weapon (Confidence " + prob + "%)! Nuclear fallout is now in effect!");
					
					cities_arr[k].time_nuked = time_sec();
				}
			}
			
			/* Handle fallout effects timing */
			if ( (cities_arr[k].time_nuked >= 0) && (time_sec() - cities_arr[k].time_nuked < FALLOUT_TIME_SECS) ) {
					damage_all_in_city(cities_arr[k], DAMAGE_PCT_PER_CYCLE, FALLOUT_EFFECT_RADIUS);
			} else if ( cities_arr[k].time_nuked >= 0 && (time_sec() - cities_arr[k].time_nuked > FALLOUT_TIME_SECS)) {
				cities_arr[k].time_nuked = -1;
				print_game_msg(cities_arr[k].name + " is now safe to enter!");
			}
		}
		
		for (int x = 0; x < global_arr_count; x++) {
			if (!cities_arr[x].rechecking) {
				cities_arr[x].num_bldgs_last = cities_arr[x].num_bldgs; // move outside check?
			}
			cities_arr[x].last_hp = cities_arr[x].hp;
		}
	}
}