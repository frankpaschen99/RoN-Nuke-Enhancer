// nuke_mod.bhs

   /*||||*\
  // RoN  \\
 //  Nuke  \\
// Enhancer \\
\*||||||||||*/

// By Frankie
// 2020

// This script aims to make nuclear arms in Rise of Nations: Extended Edition much more deadly.
// Basically, ICBMs will devastate cities and render them completely useless for a duration of time

/*
TODO

probably system -> track # of units lost per cycle
more error checking, check for crazy values that shouldnt be possible

one possible error im envisioning occurs when a city is captured by another nation. Does the city ID change? Do we need a unique ID system?
The nation ownership certainly changes, and that would create a new element in the array. I think a unique ID system would be best, it doesnt have to
be complicated. Just number them by the order they were created using the GLOBAL_ARR_COUNT variable.
*/

include "helper_library.bhs"

// TODO reset these values
// You may fuck with these as you please
labels {
	// This value determines the %HP that a building has to lose in one cycle to be considered "nuked". Default = 40
	HEALTH_DIFF_THRESHOLD = 40,
	// Number of seconds between Modern Age check calls. Default = 5 seconds	TODO: increase default. no need to be so quick
	AGE_CHECK_TIMER_DURATION = 5,
	// How often nukes are checked for, and damage is dealt to irradiated units. Determines one "cycle". Default = 2 seconds
	NUKE_WATCH_TIMER_DURATION = 4,
	// How long cities are affected by nuclear fallout in minutes. Default = 300 seconds
	FALLOUT_TIME_SECS = 180,
	// How much units/buildings within the fallout zone are damaged each cycle (%). Default = 12
	DAMAGE_PCT_PER_CYCLE = 12,
	// Radius of fallout effects from city center, measured in tiles
	FALLOUT_EFFECT_RADIUS = 20,
	
	// for me
	VER = "1.0.7"
}

scenario {	
	// Weird hack to make sure memory allocates properly. Arrays apparently don't work like C in this scripting language :\
	City preac;
	preac.name = "preallocated";
	preac.id = -1;
	preac.nation = -1;
	preac.uid = -1;
	
	static City[] cities_arr = [
	preac, preac, preac, preac, preac, preac, preac, preac, 
	preac, preac, preac, preac, preac, preac, preac, preac, 
	preac, preac, preac, preac, preac, preac, preac, preac, 
	preac, preac, preac, preac, preac, preac, preac, preac, 
	preac, preac, preac, preac, preac, preac, preac, preac, 
	preac, preac, preac, preac, preac, preac, preac, preac, 
	preac, preac, preac, preac, preac, preac, preac, preac];
	
	static GLOBAL_ARR_COUNT = 0;
	run_once {
		set_game_msg_color("GREEN");
		print_game_msg("Fromkie's Nuke Enhancement Script [v"+VER+"] is running! Standing by for Modern Age...");
		set_timer("age_check_timer", AGE_CHECK_TIMER_DURATION);	
	}
	trigger check_age(timer_expired("age_check_timer")) {		
		int age_reached = false;
		
		for (int i = 1; i < 9; ++i) {
			if (at_least_age(i, 6)) {
				print_game_msg("Nation # " + i + " has reached the Modern Age! Script activated...");
				stop_timer("age_check_timer");
				disable_trigger("check_age");
				age_reached = true;

				set_timer("nuke_watch_timer", NUKE_WATCH_TIMER_DURATION);
			}
		}
		if (age_reached == false) {
			enable_trigger("check_age");
			set_timer("age_check_timer", AGE_CHECK_TIMER_DURATION);
		}
	}
	trigger nuke_watch(timer_expired("nuke_watch_timer")) {
		set_timer("nuke_watch_timer", NUKE_WATCH_TIMER_DURATION);
		enable_trigger("nuke_watch");

		for (int i = 1; i < 9; ++i) {	// i < 9 because it's 1-8. Duh.
			for (int j = 0; j < num_cities(i); j++) {
				string city_name = find_city_name(i);
				int city_id = find_city_id(city_name);
				int city_hp = object_health(i, city_id);

				City c;
				c.nation = i;
				c.name = city_name;
				c.id = city_id;
				c.uid = GLOBAL_ARR_COUNT;	// unique id based on order of creation (helpful for city capture/assimilation)
				c.last_hp = -1;
				c.hp = city_hp;
				c.time_nuked = -1;
				
				c.num_bldgs = num_buildings_in_city(c);
				c.num_bldgs_last = -1;
			
				add_city(cities_arr, c, GLOBAL_ARR_COUNT);
			}
		}

		for (int k = 0; k < GLOBAL_ARR_COUNT; k++) {
			if (cities_arr[k].last_hp != -1 && was_damaged(cities_arr[k], HEALTH_DIFF_THRESHOLD) && cities_arr[k].time_nuked == -1) {
				float prob = was_nuked(cities_arr[k], HEALTH_DIFF_THRESHOLD);
				if (prob >= 50.0) {
					print_game_msg("Nation #" + cities_arr[k].nation + "'s City of " + cities_arr[k].name + " has been attacked with a nuclear weapon (Probability " + prob + "%)! Nuclear fallout is now in effect!");
					print_game_msg("[DEBUG] CIT_NAME=" + cities_arr[k].name + "|CIT_ID=" + cities_arr[k].id + "|CIT_UID=" + cities_arr[k].uid + "|CIT_HPCUR=" + cities_arr[k].hp + "|CIT_HPLAST="
					+ cities_arr[k].last_hp + "|CIT_NUM_BLD=" + cities_arr[k].num_bldgs + " |CIT_LAST_BLD=" + cities_arr[k].num_bldgs_last);
					
					cities_arr[k].time_nuked = time_sec();
				}
			}
			
			/* Handle fallout effect timing */
			if ( (cities_arr[k].time_nuked >= 0) && (time_sec() - cities_arr[k].time_nuked < FALLOUT_TIME_SECS) ) {
					damage_all_in_city(cities_arr[k], DAMAGE_PCT_PER_CYCLE, FALLOUT_EFFECT_RADIUS);
			} else if ( cities_arr[k].time_nuked >= 0 && (time_sec() - cities_arr[k].time_nuked > FALLOUT_TIME_SECS)) {
				cities_arr[k].time_nuked = -1;
				print_game_msg(cities_arr[k].name + " is now safe to enter!");
			}
		}
		
		for (int x = 0; x < GLOBAL_ARR_COUNT; x++) {
			cities_arr[x].last_hp = cities_arr[x].hp;
			cities_arr[x].num_bldgs_last = cities_arr[x].num_bldgs;
		}
	}
}

// ACAB