// nuke_mod.bhs

   /*||||*\
  // RoN  \\
 //  Nuke  \\
// Enhancer \\
\*||||||||||*/

// By Frankie
// 2020

// This script aims to make nuclear arms in Rise of Nations: Extended Edition much more deadly.
// Basically, ICBMs will devastate cities and render them completely useless for a duration of time (probably 10 minutes)
// All units and buildings will be destroyed, including any NEW units that enter the area, and any new buildings you
// attempt to build. (Sort of simulating nuclear fallout)

include "helper_library.bhs"

scenario {	
	static int[] nuked_cities;
	
	run_once {
		print_game_msg("RoN Nuke Enhancer by Fromkie is running!");
		set_timer("age_check_timer", 5);	// TODO: Increase duration
	}
	
	// Trigger that checks if any player has reached the Modern Age. This is done because we don't need the script running for most of the game.
	// The parameter is the condition which will trigger this function, and here it is the expiration of the age_check_timer
	trigger check_age(timer_expired("age_check_timer")) {		
		int age_reached = false;
		
		for (int i = 1; i < 8; ++i) {
			if (at_least_age(i, 6)) {
				print_game_msg("Nation # " + i + " has reached the Modern Age!");
				stop_timer("age_check_timer");
				disable_trigger("check_age");
				age_reached = true;
				
				// trigger main script here
				set_timer("nuke_watch_timer", 3);
			}
		}
		if (age_reached == false) {
			enable_trigger("check_age");
			set_timer("age_check_timer", 5);	// TODO: Increase duration
		}
	}
	trigger nuke_fallout(timer_expired("fallout_timer")) {
		
		
		enable_trigger("nuke_fallout");
	}
	trigger city_nuked() {
		
	}
	// This function will be triggered on a timer and will check for and identify cities that have just been nuked
	trigger nuke_watch(timer_expired("nuke_watch_timer")) {
		// 2D array that will (hopefully) contain pairs of city IDs as well as their healths. We will continuously check for rapid reductions in hit points which likely indicates it was just hit
		// with an ICBM. There's no actual trigger for nuke events so we need to do it this way hahaha
		static int[][] bldg_health_backup = [[0]];
		static int[][] bldg_health = [[0]];
		
		set_timer("nuke_watch_timer", 3);
		enable_trigger("nuke_watch");

		int base = 0;
		for (int i = 1; i < 8; ++i) {
			for (int j = 0; j < num_cities(i); ++j) {
				string city_name = find_city_name(i);
				int city_id = find_city_id(city_name);
				int city_hp = object_health(i, city_id);
				bldg_health[base + j][0] = city_id;
				bldg_health[base + j][1] = city_hp;	// base will equal the # of cities that we just found
				bldg_health[base + j][2] = i;		// base will equal the # of cities that we just found
													// lets say Nation #1 has two cities, it will go bldg_health[0][0], [1][0], and set base to 2. On the next call it will go bldg_health[2+0], [2+1]
													// this is so we aren't overwriting values in the array.
			}
			base += num_cities(i);
		}

		// check health difference. Weird array size comparison is because in the for loop above, a new city could be added to the array BEFORE its added to the backup (in the for loop under this one)
		if (bldg_health_backup.length > 1 && (bldg_health.length == bldg_health_backup.length))  {
			for (int x = 0; x < bldg_health.length; x++) {
				int old_health = bldg_health_backup[x][1];
				int new_health = bldg_health[x][1];
				int difference = abs(new_health - old_health);
				
				// print_game_msg("Health difference for city #" + bldg_health[x][0] + " of Nation #" + bldg_health[x][2] + " = " + difference);
				
				if (difference > 50) {		// building lost more than half its health in 3 seconds, it was most likely nuked
					print_game_msg("Nation #" + bldg_health[x][2] + "'s City #" + bldg_health[x][0] + " has been attacked with a nuclear weapon!");
					
					// start nuclear fallout script for that city 
				}
			}
		}
		
		// copy bldg health to backup
		for (int x = 0; x < bldg_health.length; x++) {
			for (int y = 0; y < bldg_health[x].length; y++) {
				bldg_health_backup[x][y] = bldg_health[x][y];
			}
		}
	}
}














