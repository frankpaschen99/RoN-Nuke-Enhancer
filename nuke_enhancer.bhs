// nuke_mod.bhs

   /*||||*\
  // RoN  \\
 //  Nuke  \\
// Enhancer \\
\*||||||||||*/

// By Frankie
// 2020

// This script aims to make nuclear arms in Rise of Nations: Extended Edition much more deadly.
// Basically, ICBMs will devastate cities and render them completely useless for a duration of time

include "helper_library.bhs"

// You may fuck with these as you please
labels {
	// This value determines the amount of hit points that a building has to lose in one cycle to be considered "nuked". Default = 50
	HEALTH_DIFF_THRESHOLD = 50,
	// Number of seconds between Modern Age check calls. Default = 5 seconds
	AGE_CHECK_TIMER_DURATION = 5,
	// How often nukes are checked for, and damage is dealt to irradiated units. Determines one "cycle". Default = 1 seconds
	NUKE_WATCH_TIMER_DURATION = 2,
	// How long cities are affected by nuclear fallout in minutes. Default = 300 seconds
	FALLOUT_TIME_SECS = 300,
	// How much units/buildings within the fallout zone are damaged each cycle (%). Default = 34
	DAMAGE_PCT_PER_CYCLE = 12,
	// Radius of fallout effects from city center. Measured in tiles, apparently
	FALLOUT_EFFECT_RADIUS = 15
}

scenario {	
	static City[] city_list;
	
	run_once {
		set_game_msg_color("GREEN");
		print_game_msg("Fromkie's Nuke Enhancement Script is running! Standing by for Modern Age...");
		set_timer("age_check_timer", AGE_CHECK_TIMER_DURATION);	// TODO: Increase duration
	}
	trigger check_age(timer_expired("age_check_timer")) {		
		int age_reached = false;
		
		for (int i = 1; i < 9; ++i) {
			if (at_least_age(i, 6)) {
				print_game_msg("Nation # " + i + " has reached the Modern Age! Script activated...");
				stop_timer("age_check_timer");
				disable_trigger("check_age");
				age_reached = true;

				set_timer("nuke_watch_timer", NUKE_WATCH_TIMER_DURATION);
			}
		}
		if (age_reached == false) {
			enable_trigger("check_age");
			set_timer("age_check_timer", AGE_CHECK_TIMER_DURATION);	// TODO: Increase duration
		}
	}
	trigger nuke_watch(timer_expired("nuke_watch_timer")) {
		set_timer("nuke_watch_timer", NUKE_WATCH_TIMER_DURATION);
		enable_trigger("nuke_watch");

		for (int i = 1; i < 9; ++i) {	// i < 9 because it's 1-8. Duh.
			for (int j = 0; j < num_cities(i); j++) {
				string city_name = find_city_name(i);
				int city_id = find_city_id(city_name);
				int city_hp = object_health(i, city_id);

				City c;
				c.nation = i;
				c.name = city_name;
				c.id = city_id;
				c.last_hp = -1;
				c.hp = city_hp;
				c.time_nuked = -1;
				
				c.num_bldgs = num_buildings_in_city(c);
				c.num_bldgs_last = -1;
				
				//print_game_msg("num bldgs in " + c.name + ": " + c.num_bldgs);
			
				add_city(city_list, c);
			}
		}
		
		for (int k = 0; k < city_list.length; k++) {
			if (city_list[k].last_hp >= 0) {
				int prob = was_nuked(city_list[k]);
				if (prob >= 50) {
					print_game_msg("Nation #" + city_list[k].nation + "'s City of " + city_list[k].name + " has been attacked with a nuclear weapon (Probability " + prob + "%)! Nuclear fallout is now in effect!");
					
					city_list[k].time_nuked = time_sec();
				}
				if ( (city_list[k].time_nuked >= 0) && (time_sec() - city_list[k].time_nuked < FALLOUT_TIME_SECS) ) {
					damage_all_in_city(city_list[k], DAMAGE_PCT_PER_CYCLE, FALLOUT_EFFECT_RADIUS);
				}
				if ( city_list[k].time_nuked >= 0 && (time_sec() - city_list[k].time_nuked > FALLOUT_TIME_SECS)) {
					city_list[k].time_nuked = -1;
					print_game_msg(city_list[k].name + " is now safe to enter!");
				}
			}
		}
		
		for (int l = 0; l < city_list.length; l++) {
			city_list[l].last_hp = city_list[l].hp;
			city_list[l].num_bldgs_last = city_list[l].num_bldgs;
		}
	}
}
// Give money to these people -> https://www.artsbusinesscollaborative.org/asp-products/black-trans-protestors-emergency-fund/
